import { getSolution } from "../part1.mts";
import fs from "fs";
import { count, getNumCombinations, parseInput } from "../common.mts";

describe("Day 11", () => {
  describe("Part 1", () => {
    describe("getSolution", () => {
      it("works with test data", () => {
        const input =
          "???.### 1,1,3\n" +
          ".??..??...?##. 1,1,3\n" +
          "?#?#?#?#?#?#?#? 1,3,1,6\n" +
          "????.#...#... 4,1,1\n" +
          "????.######..#####. 1,6,5\n" +
          "?###???????? 3,2,1";

        expect(getSolution(input)).toBe(21);
      });
      it("works with each input line", () => {
        const expected = [
          2, 6, 10, 2, 5, 4, 11, 4, 5, 2, 12, 2, 1, 2, 2, 3, 1, 3, 1, 1, 14, 20,
          2, 4, 6, 23, 17, 5, 12, 23, 2, 2, 3, 1, 4, 4, 1, 2, 2, 5, 1, 1, 3, 4,
          4, 1, 12, 3, 16, 2, 2, 3, 75, 50, 3, 3, 2, 45, 2, 4, 4, 10, 5, 1, 2,
          14, 2, 1, 1, 6, 1, 4, 1, 3, 2, 2, 2, 2, 6, 36, 2, 4, 3, 4, 16, 4, 6,
          2, 1, 2, 8, 4, 12, 4, 16, 3, 2, 3, 3, 6, 2, 1, 1, 3, 5, 9, 8, 15, 1,
          6, 1, 2, 3, 3, 86, 5, 2, 12, 11, 5, 28, 19, 2, 2, 7, 6, 5, 4, 2, 6, 7,
          13, 20, 1, 1, 6, 8, 3, 2, 9, 2, 6, 5, 13, 3, 1, 4, 28, 6, 25, 6, 14,
          2, 3, 37, 21, 2, 1, 6, 2, 13, 14, 8, 7, 3, 2, 2, 6, 5, 12, 2, 1, 18,
          1, 4, 1, 4, 5, 10, 6, 3, 1, 6, 15, 2, 12, 2, 5, 49, 3, 3, 1, 2, 6, 4,
          6, 3, 1, 1, 16, 5, 2, 5, 3, 4, 2, 1, 12, 2, 6, 12, 6, 2, 12, 5, 4, 4,
          8, 1, 15, 1, 4, 6, 3, 5, 6, 4, 4, 2, 2, 31, 2, 2, 1, 6, 1, 3, 4, 3, 2,
          10, 22, 20, 12, 6, 4, 3, 1, 3, 3, 2, 2, 1, 2, 12, 1, 1, 5, 3, 4, 14,
          4, 2, 5, 2, 1, 3, 1, 1, 7, 2, 9, 4, 58, 9, 20, 1, 16, 4, 2, 3, 3, 1,
          2, 6, 2, 2, 7, 3, 1, 6, 8, 6, 6, 2, 38, 28, 26, 12, 7, 2, 6, 1, 2, 4,
          15, 10, 4, 4, 1, 2, 2, 8, 3, 2, 4, 3, 6, 1, 3, 3, 2, 24, 6, 16, 6, 6,
          72, 16, 192, 4, 5, 3, 4, 3, 5, 1, 3, 12, 10, 15, 9, 29, 29, 15, 10, 1,
          3, 6, 2, 2, 8, 3, 3, 2, 38, 2, 5, 14, 14, 1, 1, 7, 2, 4, 1, 6, 4, 9,
          1, 1, 1, 3, 3, 3, 3, 16, 24, 5, 12, 9, 2, 4, 10, 3, 1, 18, 1, 4, 1, 2,
          3, 7, 20, 2, 4, 3, 5, 7, 4, 1, 6, 7, 1, 1, 2, 2, 2, 3, 4, 4, 9, 2, 9,
          10, 4, 3, 12, 4, 40, 14, 3, 13, 16, 4, 5, 4, 4, 8, 16, 7, 4, 6, 1, 1,
          21, 1, 1, 6, 8, 1, 9, 16, 1, 20, 1, 10, 1, 2, 5, 36, 1, 2, 4, 2, 2, 2,
          1, 10, 6, 1, 5, 4, 2, 1, 1, 3, 2, 1, 3, 2, 3, 3, 1, 3, 4, 2, 4, 24,
          11, 3, 4, 1, 10, 2, 4, 2, 27, 12, 3, 6, 7, 7, 2, 6, 4, 11, 8, 3, 10,
          6, 2, 2, 7, 17, 7, 10, 16, 39, 3, 38, 2, 5, 7, 1, 16, 3, 9, 1, 4, 2,
          2, 2, 1, 1, 1, 9, 5, 17, 21, 2, 2, 5, 24, 3, 1, 6, 7, 3, 6, 9, 3, 26,
          10, 8, 4, 14, 6, 7, 3, 6, 3, 3, 2, 4, 13, 2, 27, 2, 10, 5, 1, 7, 55,
          2, 14, 2, 13, 15, 1, 2, 9, 5, 6, 18, 6, 30, 2, 1, 2, 4, 6, 9, 10, 2,
          2, 7, 39, 11, 3, 12, 4, 2, 5, 2, 38, 5, 3, 1, 4, 2, 3, 2, 18, 6, 1,
          12, 5, 5, 2, 6, 3, 4, 11, 4, 2, 8, 1, 3, 3, 17, 4, 2, 4, 4, 18, 6, 2,
          2, 2, 18, 4, 3, 9, 35, 6, 6, 2, 1, 28, 4, 6, 6, 8, 4, 33, 2, 2, 4, 10,
          19, 6, 8, 1, 2, 5, 8, 8, 7, 15, 2, 4, 5, 5, 6, 2, 3, 12, 3, 4, 7, 4,
          1, 12, 20, 6, 10, 7, 2, 1, 4, 1, 3, 20, 65, 2, 7, 2, 3, 12, 5, 1, 8,
          1, 6, 36, 2, 15, 2, 1, 1, 72, 6, 11, 6, 3, 9, 22, 6, 10, 12, 2, 5, 3,
          2, 2, 4, 14, 3, 1, 6, 3, 3, 1, 4, 3, 1, 1, 8, 1, 2, 2, 3, 4, 3, 1, 9,
          3, 10, 2, 4, 2, 4, 4, 2, 4, 16, 5, 1, 1, 2, 12, 1, 6, 4, 3, 2, 2, 1,
          2, 4, 10, 8, 1, 7, 4, 1, 2, 14, 4, 2, 7, 1, 1, 5, 4, 4, 2, 3, 27, 4,
          2, 2, 1, 6, 9, 2, 14, 3, 1, 2, 4, 21, 8, 7, 9, 1, 1, 9, 1, 2, 8, 18,
          2, 1, 2, 2, 14, 35, 4, 12, 3, 10, 1, 4, 4, 15, 1, 4, 6, 4, 3, 14, 4,
          2, 4, 5, 1, 12, 6, 2, 2, 1, 2, 1, 6, 11, 4, 10, 9, 6, 2, 21, 19, 1, 1,
          4, 4, 2, 15, 3, 1, 26, 1, 1, 6, 4, 5, 22, 10, 14, 7, 2, 4, 2, 3, 2, 6,
          4, 27, 4, 3, 13, 1, 3, 7, 1, 2, 1, 4, 10, 1, 1, 1, 11, 6, 5, 2, 6, 17,
          2, 14, 10, 4, 4, 4, 2, 6, 2, 23, 63, 6, 4, 5, 1, 5, 3, 18, 3, 1, 6, 5,
          4, 6, 6, 1, 82, 2, 5, 1, 9, 36, 2, 24, 2, 12, 6, 6, 4, 15, 4, 3, 3, 1,
          3, 9, 3, 8, 6, 3, 5, 3, 6, 3, 2, 3, 29, 6, 3, 2, 1, 2, 1, 5, 1, 3, 15,
          4, 1, 1, 4, 2, 6, 3, 21, 2, 4, 1, 2, 2, 3, 2, 3, 2, 6, 4, 68, 2, 4,
          37, 66, 2, 9, 2, 6, 12, 13, 7, 3, 2, 6, 12, 32, 8, 4, 8, 1, 4, 4, 2,
        ];
        const input = fs.readFileSync("./src/days/day12/input.txt").toString();
        expect(
          parseInput(input).map((doc) =>
            getNumCombinations(doc.pattern, doc.groups),
          ),
        ).toEqual(expected);
      });
      it("works with input", () => {
        expect(
          getSolution(fs.readFileSync("./src/days/day12/input.txt").toString()),
        ).toBe(7286);
      });
    });
  });
});
