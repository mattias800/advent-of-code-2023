import { getSolution } from "../part1.mts";
import fs from "fs";
import { parseInput, predictNext } from "../common.mts";

describe("Day 09", () => {
  describe("Part 1", () => {
    describe("getSolution", () => {
      it("works with test data", () => {
        expect(
          getSolution(
            "0 3 6 9 12 15\n" + "1 3 6 10 15 21\n" + "10 13 16 21 30 45",
          ),
        ).toBe(114);
      });
      it("works with line 1", () => {
        expect(
          getSolution(
            "0 14 45 109 238 493 989 1942 3763 7260 14077 27610 54805 109473 218063 429227 829002 1564034 2875989 5151147 8990168",
          ),
        ).toBe(15304165);
      });
      it("works with line 2", () => {
        expect(
          getSolution(
            "15 18 30 59 111 187 296 499 999 2292 5394 12159 25703 50949 95308 169511 288607 473142 750534 1156659 1737663",
          ),
        ).toBe(2552015);
      });
      it("works with line 3", () => {
        expect(
          getSolution(
            "5 11 15 33 90 214 428 752 1253 2229 4693 11450 29258 72870 172222 384737 815757 1651623 3212059 6031479 10982866",
          ),
        ).toBe(19463254);
      });
      it("works with line 4", () => {
        expect(
          getSolution(
            "11 16 23 24 13 -7 -3 134 674 2194 5828 13721 29926 62289 126510 254929 515555 1053450 2181099 4575420 9702689",
          ),
        ).toBe(20717471);
      });
      it("works with line 5", () => {
        expect(
          getSolution(
            "16 31 60 112 215 439 934 1988 4110 8143 15412 27912 48541 81383 132046 208060 319340 478719 702556 1011424 1430883",
          ),
        ).toBe(1992343);
      });
      it("works with line 6", () => {
        expect(
          getSolution(
            "12 7 12 54 178 448 938 1712 2791 4113 5527 6958 9104 15500 37718 107235 300798 792410 1957506 4580209 10266638",
          ),
        ).toBe(22273579);
      });
      it("works with line 7", () => {
        expect(
          getSolution(
            "17 21 30 48 77 119 191 374 932 2554 6791 16781 38378 81826 164146 312433 568291 993667 1678380 2749678 4384195",
          ),
        ).toBe(6822721);
      });
      it("works with line 8", () => {
        expect(
          getSolution(
            "24 37 63 112 194 319 497 738 1052 1449 1939 2532 3238 4067 5029 6134 7392 8813 10407 12184 14154",
          ),
        ).toBe(16327);
      });
      it("works with line 9", () => {
        expect(
          getSolution(
            "11 8 18 52 130 304 693 1530 3221 6416 12092 21648 37012 60760 96247 147750 220623 321464 458294 640748 880278",
          ),
        ).toBe(1190368);
      });
      it("works with line 10", () => {
        expect(
          getSolution(
            "22 33 42 54 85 172 386 856 1822 3745 7512 14784 28545 53920 99340 178142 310702 527209 871198 1403970 2210037",
          ),
        ).toBe(3403740);
      });
      it("works with line 15", () => {
        expect(
          getSolution(
            "20 38 72 140 277 545 1041 1903 3314 5504 8750 13374 19739 28243 39311 53385 70912 92330 118052 148448 183825",
          ),
        ).toBe(224405);
      });
      it("works with first 10 lines", () => {
        const input =
          "0 14 45 109 238 493 989 1942 3763 7260 14077 27610 54805 109473 218063 429227 829002 1564034 2875989 5151147 8990168\n" +
          "15 18 30 59 111 187 296 499 999 2292 5394 12159 25703 50949 95308 169511 288607 473142 750534 1156659 1737663\n" +
          "5 11 15 33 90 214 428 752 1253 2229 4693 11450 29258 72870 172222 384737 815757 1651623 3212059 6031479 10982866\n" +
          "11 16 23 24 13 -7 -3 134 674 2194 5828 13721 29926 62289 126510 254929 515555 1053450 2181099 4575420 9702689\n" +
          "16 31 60 112 215 439 934 1988 4110 8143 15412 27912 48541 81383 132046 208060 319340 478719 702556 1011424 1430883\n" +
          "12 7 12 54 178 448 938 1712 2791 4113 5527 6958 9104 15500 37718 107235 300798 792410 1957506 4580209 10266638\n" +
          "17 21 30 48 77 119 191 374 932 2554 6791 16781 38378 81826 164146 312433 568291 993667 1678380 2749678 4384195\n" +
          "24 37 63 112 194 319 497 738 1052 1449 1939 2532 3238 4067 5029 6134 7392 8813 10407 12184 14154\n" +
          "11 8 18 52 130 304 693 1530 3221 6416 12092 21648 37012 60760 96247 147750 220623 321464 458294 640748 880278\n" +
          "22 33 42 54 85 172 386 856 1822 3745 7512 14784 28545 53920 99340 178142 310702 527209 871198 1403970 2210037\n";

        const expected = [
          15304165, 2552015, 19463254, 20717471, 1992343, 22273579, 6822721,
          16327, 1190368, 3403740,
        ];

        const data = parseInput(input);

        const actual = data.map((d) => predictNext(d));

        expect(actual).toEqual(expected);
      });
      it("works with all lines", () => {
        const input = fs.readFileSync("./src/days/day09/input.txt").toString();

        const expected = [
          15304165, 2552015, 19463254, 20717471, 1992343, 22273579, 6822721,
          16327, 1190368, 3403740, 5800, 1023721, 418881, 1580, 224405,
          13750568, 16882459, -420212, 2648, 20216381, 12677569, 21877628,
          11214986, 18813301, 755480, 2415448, 18775806, 1512943, 24622,
          13583731, -373, 26603560, 2447123, -100, 8349679, 693086, 15011519,
          15911646, 19648149, 29073, 13159063, 15945578, 2212781, 9286422, -360,
          1205955, 20675278, 1814776, 12105047, 23256191, 7310723, 13108836,
          17488, 170781, 2798021, 33217721, 39347026, 9365889, 2714466, -334108,
          1676321, 10566576, 1208785, 4229115, 294, 24221530, 5250942, 4893015,
          24382160, -171702, 482, 26857970, 1639271, 40751137, 19269672, -96,
          35197016, 1973806, 32132438, 18988088, 10584451, -874060, 7676019,
          320406, -421, 417107, -14877, 961840, 19106956, 415493, 3453335,
          11492, 26592807, 1572511, 10088764, 27981414, 20504206, 19696398,
          8066394, 12888000, 1913, 42819645, 21357401, 2682010, 24681511,
          652419, 9192890, -530203, 18582799, 2474262, 20198011, 5233296, 18308,
          312203, 1068637, 1393060, -6209, 29389110, 489865, -441429, -2648,
          33296214, 25592570, 7188266, 11896285, 17743845, 24384403, 23172980,
          331, 41271794, 30966845, 23772645, -4132, 2282819, 33595288, 34566131,
          -2221236, 20653268, 53565, -4146, 173, 18946495, 328207, 332,
          24345904, 17013005, 3431, 317438, 433241, 8949312, 1904151, 11538758,
          2146356, 38772, 4918201, 4394, 37436, 11559493, 15621734, 482477,
          24641081, 199, 21639523, 2017443, 3820228, -69, 907981, 81423, 1620,
          -115439, 18099566, 19209858, 11070761, -25256, 15492458, 734742,
          8581508, -515482, 3044, 31342594, 15322873, 17147650, 16149418,
          29989285, 4323183, 10866842, 58082, -3481, 569441, 29957178, 4626189,
          6328514, -76842, 8097046, 3064311, 13300, 17762273, 1583799, 24374165,
          22415,
        ];

        const data = parseInput(input);

        const actual = data.map((d) => predictNext(d));

        expect(actual).toEqual(expected);
      });
      it("works with input", () => {
        expect(
          getSolution(fs.readFileSync("./src/days/day09/input.txt").toString()),
        ).toBe(1939607039);
      });
    });
  });
});
